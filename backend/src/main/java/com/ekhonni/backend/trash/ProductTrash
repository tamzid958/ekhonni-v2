//    public List<ProductProjection> getAll(ProductRequest productRequest) {
//
//
//        Specification<Product> spec = Specification.where(null);
//
//
//        spec = spec.and(ProductSpecifications.hasMinimumPrice(productRequest.getMinPrice()));
//
//        List<ProductProjection> result = productRepository.findBy(spec, q -> q
////                .project("name")
//                        .as(ProductProjection.class)
//                        .all()
//        );
//
//        return result;
//    }


// category subcategory
//    public Map<Category, List<CategoryProjection>> getRootAndFirstSub() {
//        List<Category> rootCategories = categoryRepository.findByParentCategoryIsNull();
//        Map<Category, List<CategoryProjection>> parentChildCategories = new LinkedHashMap<>();
//
//        for (Category rootCategory : rootCategories) {
//            List<CategoryProjection> subCategories = categoryRepository.findByParentCategoryOrderByIdAsc(rootCategory);
//            parentChildCategories.put(rootCategory, subCategories);
//        }
//        return parentChildCategories;
//    }



// shop by category
 public List<CategorySubCategoryDTO> getRootAndFirstSub() {
        List<Category> rootCategories = categoryRepository.findByParentCategoryIsNull();
        List<CategorySubCategoryDTO> categorySubCategoryDTOS = new ArrayList<>();

        for (Category rootCategory : rootCategories) {
            CategorySubCategoryDTO categorySubCategoryDTO = new CategorySubCategoryDTO(rootCategory.getName(), new ArrayList<>());
            List<CategoryProjection> subCategories = categoryRepository.findByParentCategoryOrderByIdAsc(rootCategory);
            for (CategoryProjection categoryProjection : subCategories) {
                categorySubCategoryDTO.getSubCategories().add(categoryProjection.getName());
            }
            categorySubCategoryDTOS.add(categorySubCategoryDTO);
        }
        return categorySubCategoryDTOS;

    }



  @Query("SELECT p.id AS id, p.price AS price, p.name AS name, p.description AS description, " +
            "p.createdAt AS createdAt, p.updatedAt AS updatedAt, p.condition AS condition, p.category.id AS categoryId, p.category.name AS categoryName " +
            "FROM Product p")
    Page<ProductProjection> findAllProjection(Pageable pageable);


    ProductProjection findProductProjectionById(Long id);
